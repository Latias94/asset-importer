name: Build Prebuilt Binaries

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to build (e.g., asset-importer-sys-v0.1.0 or v0.1.0)'
        required: true
        type: string
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-prebuilt:
    name: Build ${{ matrix.target }} (${{ matrix.link_type }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            link_type: static
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            link_type: dylib
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-13
            link_type: static
          - target: x86_64-apple-darwin
            os: macos-13
            link_type: dylib
          - target: aarch64-apple-darwin
            os: macos-latest
            link_type: static
          - target: aarch64-apple-darwin
            os: macos-latest
            link_type: dylib
          
          # Windows targets
          # Emit both MD and MT variants for Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            link_type: static
            crt: md
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            link_type: dylib
            crt: md
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            link_type: static
            crt: mt
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            link_type: dylib
            crt: mt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ inputs.tag || github.ref }}

      - name: Parse version from tag
        id: parse_version
        run: |
          chmod +x .github/scripts/parse-version.sh
          .github/scripts/parse-version.sh "${{ inputs.tag || github.ref_name }}"
        shell: bash

      - name: Check if this is a sys crate release
        run: |
          if [ "${{ steps.parse_version.outputs.crate }}" != "asset-importer-sys" ]; then
            echo "This workflow only builds prebuilt binaries for asset-importer-sys releases"
            echo "Detected crate: ${{ steps.parse_version.outputs.crate }}"
            echo "Skipping build..."
            exit 0
          fi
          echo "âœ… Building prebuilt binaries for asset-importer-sys v${{ steps.parse_version.outputs.version }}"
        shell: bash

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-${{ matrix.link_type }}

      # Install platform-specific dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
        shell: bash

      - name: Install LLVM (libclang) for bindgen
        if: runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v1
        with:
          directory: ${{ runner.temp }}/llvm
          cached: true
          version: '14.0'

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake
        shell: bash

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install cmake
        shell: pwsh

      # Set up cross-compilation for different targets
      - name: Setup cross-compilation
        if: matrix.target != 'x86_64-unknown-linux-gnu' && runner.os == 'Linux'
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      # Build with appropriate features
      # Non-Windows build
      - name: Build asset-importer-sys (non-Windows)
        if: runner.os != 'Windows'
        working-directory: asset-importer-sys
        run: |
          if [ "${{ matrix.link_type }}" = "static" ]; then
            cargo build --release --target ${{ matrix.target }} --features "build-assimp,static-link"
          else
            cargo build --release --target ${{ matrix.target }} --features "build-assimp"
          fi
        shell: bash
        env:
          # Force source build in CI
          ASSET_IMPORTER_FORCE_BUILD: "1"
          # Set TARGET environment variable for package binary
          TARGET: ${{ matrix.target }}

      # Windows build with optional CRT override
      - name: Build asset-importer-sys (Windows)
        if: runner.os == 'Windows'
        working-directory: asset-importer-sys
        run: |
          FEATURES="build-assimp"
          if [ "${{ matrix.link_type }}" = "static" ]; then
            FEATURES="${FEATURES},static-link"
          fi
          if [ "${{ matrix.crt }}" = "mt" ]; then
            export RUSTFLAGS="-C target-feature=+crt-static"
          fi
          echo "Using FEATURES=${FEATURES} RUSTFLAGS=${RUSTFLAGS:-<empty>}"
          cargo build --release --target ${{ matrix.target }} --features "${FEATURES}"
        shell: bash
        env:
          ASSET_IMPORTER_FORCE_BUILD: "1"
          TARGET: ${{ matrix.target }}

      # Run the package tool to create archives
      - name: Package binaries (non-Windows)
        if: runner.os != 'Windows'
        working-directory: asset-importer-sys
        run: |
          if [ "${{ matrix.link_type }}" = "static" ]; then
            cargo run --bin package --release --target ${{ matrix.target }} --features "build-assimp,static-link"
          else
            cargo run --bin package --release --target ${{ matrix.target }} --features "build-assimp"
          fi
        shell: bash
        env:
          ASSET_IMPORTER_PACKAGE_DIR: ${{ github.workspace }}/packages
          ASSET_IMPORTER_FORCE_BUILD: "1"
          TARGET: ${{ matrix.target }}

      - name: Package binaries (Windows)
        if: runner.os == 'Windows'
        working-directory: asset-importer-sys
        run: |
          FEATURES="build-assimp"
          if [ "${{ matrix.link_type }}" = "static" ]; then
            FEATURES="${FEATURES},static-link"
          fi
          if [ "${{ matrix.crt }}" = "mt" ]; then
            export RUSTFLAGS="-C target-feature=+crt-static"
          fi
          echo "Using FEATURES=${FEATURES} RUSTFLAGS=${RUSTFLAGS:-<empty>}"
          cargo run --bin package --release --target ${{ matrix.target }} --features "${FEATURES}"
        shell: bash
        env:
          ASSET_IMPORTER_PACKAGE_DIR: ${{ github.workspace }}/packages
          ASSET_IMPORTER_FORCE_BUILD: "1"
          TARGET: ${{ matrix.target }}

      # Upload artifacts for release
      - name: Upload to release
        uses: softprops/action-gh-release@v2
        if: inputs.tag || github.event_name == 'release'
        with:
          tag_name: ${{ inputs.tag || github.ref_name }}
          files: ${{ github.workspace }}/packages/*.tar.gz
          fail_on_unmatched_files: false
