name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test (${{ matrix.os }}, ${{ contains(matrix.features, 'static-link') && 'static' || 'dylib' }}, ${{ matrix.crt }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Always build from source in CI to avoid prebuilt/version skew
        features: ['build-assimp', 'build-assimp,static-link']
        # Add CRT dimension; only meaningful on Windows
        crt: [dynamic, static]
        exclude:
          - os: ubuntu-latest
            crt: static
          - os: macos-latest
            crt: static
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # Install system dependencies for different platforms
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install LLVM (libclang) for bindgen
        if: runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v1
        with:
          directory: ${{ runner.temp }}/llvm
          cached: true
          version: '14.0'

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install cmake

      - name: Select static CRT (Windows)
        if: ${{ runner.os == 'Windows' && matrix.crt == 'static' }}
        shell: pwsh
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV

      - name: Echo build parameters
        shell: bash
        run: |
          echo "OS=${{ matrix.os }}"
          echo "FEATURES=${{ matrix.features }}"
          echo "CRT=${{ matrix.crt }}"
          echo "RUSTFLAGS=${RUSTFLAGS:-<empty>}"
          if [[ "${{ contains(matrix.features, 'static-link') }}" == "true" ]]; then
            echo "LINK_TYPE=static"
          else
            echo "LINK_TYPE=dylib"
          fi

      - name: Build workspace (from source)
        run: cargo build --workspace --features "${{ matrix.features }}"
        env:
          ASSET_IMPORTER_FORCE_BUILD: "1"

      - name: Run tests
        run: cargo test --workspace --features "${{ matrix.features }}"
        env:
          ASSET_IMPORTER_FORCE_BUILD: "1"

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --features build-assimp -- -D warnings

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check
